전형적인 분할정복 문제이다.
check 함수를 bool로 구현하면 원하는 int값을 반환받지 못하지 때문에
int 반환형 함수로 정의하고 특정 숫자(여기선 10)를 return하면 false처럼 취급하기로 했다.


#include <iostream>
using namespace std;

int n;

int arr[3 * 3 * 3 * 3 * 3 * 3 * 3 + 1][3 * 3 * 3 * 3 * 3 * 3 * 3 + 1];

int ansArr[3];

int check(int size, int startY, int startX)
{
	int base = arr[startY][startX];

	for (int i = startY; i < startY + size; i++)
	{
		for (int j = startX; j < startX + size; j++)
		{
			if (arr[i][j] != base)
			{
				return 10;
			}
		}
	}

	return base;
}

void solve(int size, int startY, int startX)
{
	int checkNum = check(size, startY, startX);

	if (checkNum != 10)
	{
		ansArr[checkNum + 1]++;
	}
	
	else
	{
		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 3; j++)
			{
				solve(size / 3, startY + i * size / 3, startX + j * size / 3);
			}
		}
	}
}

int main()
{
	ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);

	cin >> n;

	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= n; j++)
		{
			cin >> arr[i][j];
		}
	}
	
	solve(n, 1, 1);

	for (int i = 0; i < 3; i++)
	{
		cout << ansArr[i] << '\n';
	}
}

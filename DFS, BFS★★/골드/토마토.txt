BFS를 이용한 최단거리와 유사한 문제. 다만, 시작점이 여러개 있을 수 있다.
0이면 방문했을 때 1로 바꾸기 때문에 방문 했는지를 체크하는 visited배열이 필요가 없다.
처음 시간초과 이유: 매번 큐에서 pop할 때 마다 전체 배열을 검사하는 check함수를 썼었다.
하지만 변수 zero를 쓰면 간단히 해결할 수 있다. 배열을 보지 않고 0의 갯수를 세면 되기
때문.

#include <iostream>
#include <queue>
#include <cstring>

using namespace std;

int m,n;
int arr[1005][1005];
int zero = 0;			// 이걸로 시간초과 해결! check함수 쓸 필요 X.
int pos4[4][2] = { {1,0},{-1,0},{0,1},{0,-1} };

struct Point
{
	int y;
	int x;
	int count;
};

//bool check()
//{
//	for (int i = 1; i <= n; i++)
//	{
//		for (int j = 1; j <= m; j++)
//		{
//			if (arr[i][j] == 0)
//			{
//				return false;
//			}
//		}
//	}
//	return true;
//}

int main()
{
	ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	
	cin >> m >>n;
	queue<Point> q;

	// 벽을 포함한 다른 영역을 -1로 만들어서 귀찮은 연산을 없앰.
	memset(arr, -1, sizeof(arr));

	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= m; j++)
		{
			cin >> arr[i][j];

			if (arr[i][j] == 1)
			{
				q.push({ i, j, 0 });
			}

			if (arr[i][j] == 0)
			{
				zero++;
			}
		}
	}

	if (zero == 0)		// 초기검사.
	{
		cout << 0;
		return 0;
	}
	
	while (!q.empty())
	{
		int nowY = q.front().y;
		int nowX = q.front().x;
		int cnt = q.front().count;

		q.pop();


		for (int i = 0; i < 4; i++)		// 4방향 검사.
		{
			int tmpY = pos4[i][0];
			int tmpX = pos4[i][1];

			if (arr[nowY + tmpY][nowX + tmpX] == 0)
			{
				arr[nowY + tmpY][nowX + tmpX] = 1;
				q.push({ nowY + tmpY , nowX + tmpX, cnt + 1 });
				zero--;
			}
		}

		if (zero==0)
		{
			cout << cnt + 1;
			return 0;
		}
	}
	
	cout << -1;
	return 0;
}
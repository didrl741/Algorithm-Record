#include <iostream>
#include <vector>
#include <stack>
#include <cstring>
using namespace std;

int n;
int m;
int ans = 0;

vector <int> arr[101];
bool visited[101];

stack<int> st;

void DFS(int vertex)			// 재귀 구현1
{
	if (visited[vertex] == true) return;

	else
	{
		visited[vertex] = true;
		ans++;

		for (int i = 0; i < arr[vertex].size(); i++)
		{
			DFS(arr[vertex][i]);
		}
	}
}


void DFS2(int vertex)			// 재귀 구현
{
	visited[vertex] = true;
	ans++;

	for (int i = 0; i < arr[vertex].size(); i++)
	{
		if (visited[arr[vertex][i]] == false)
		{
			DFS(arr[vertex][i]);
		}
	}
}


void DFS3(int vertex)		// 스택 구현
{
	visited[vertex] = true;
	st.push(vertex);
	ans++;

	while (!st.empty())
	{
		// 주의 : 스택은 push하면 top이 바뀐다!
		int now_top = st.top();
		st.pop();			// pop 위치 주의!! 

		for (int i = 0; i < arr[now_top].size(); i++)
		{
			if (visited[arr[now_top][i]] == false)
			{
				visited[arr[now_top][i]] = true;
				ans++;
				st.push(arr[now_top][i]);
			}
		}
	}
}


int main()
{
	memset(visited, 0, sizeof(visited));
	cin >> n >> m;

	for (int i = 0; i < m; i++)
	{
		int a, b;
		cin >> a >> b;

		arr[a].push_back(b);
		arr[b].push_back(a);
	}


	DFS3(1);

	cout << ans - 1;
}
내가 푼 풀이
각 사람마다의 케빈베이컨의 수를 BFS를 이용해서 구한다.
이것들 중 최소값의 사람을 출력한다.
DP를 고려해봤지만 BFS 특성상 효율적인것 같지 않다.
(bfs는 넓게 퍼지는 방식으로서, 특정 목표를 찾으려면 어차피 다른 점들도 거쳐가게 돼있다.)
참고: 전역으로 선언하지 않았으면 0으로 셋팅되지 않는다!

#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
using namespace std;

int n;
int m;
vector<int> arr[101];

int minValue = 10000;
int minPerson;

int calcDistant(int start)
{
	int tmp = 0;
	bool visited[101];

	// 필수!!
	memset(visited, 0, sizeof(visited));

	queue< pair<int, int> > q;

	visited[start] = true;
	q.push({ start, 0 });

	while (!q.empty())
	{
		int nowPos = q.front().first;
		int nowCnt = q.front().second;

		q.pop();

		for (int i = 0; i < arr[nowPos].size(); i++)
		{
			if (visited[arr[nowPos][i]] == false)
			{
				q.push({ arr[nowPos][i] , nowCnt + 1 });
				visited[arr[nowPos][i]] = true;

				tmp += nowCnt + 1;
			}
		}
	}
	return tmp;

}


int main()
{
	ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);

	cin >> n >> m;

	for (int i = 0; i < m; i++)
	{
		int a, b;
		cin >> a >> b;
		arr[a].push_back(b);
		arr[b].push_back(a);
	}

	for (int i = 1; i <= n; i++)
	{
		int tmp = calcDistant(i);

		if (minValue > tmp)
		{
			minPerson = i;
			minValue = tmp;
		}
	}

	cout << minPerson;
}
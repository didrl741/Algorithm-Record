각 경로마다 visited를 따로 해줘야 하는 고민이 있었다
-> 특정 지점(visited==false)에 도착했다는것은 그 지점에 처음으로 도착 즉
최단거리로 왔다는 말이다. 다른 경로에서 이후에 그 지점에 도착해봤자
이미 최단경로가 될 수는 없다. 따라서
visited배열은 전역으로 1개만 있으면 된다.

#include <iostream>
#include <string>
#include <queue>
using namespace std;

int arr[101][101];
int n, m;

bool visited[101][101];

struct Atom
{
	int y;
	int x;
	int cnt;
};

queue<Atom> q;

int where[4][2] = { {1,0}, {-1,0}, {0,1}, {0,-1} };

int main()
{
	ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
	
	cin >> n >> m;

	for (int i = 1; i <= n; i++)
	{
		string str;
		cin >> str;
		for (int j = 1; j <= m; j++)
		{
			arr[i][j] = int(str[j-1] - '0');
		}
	}

	q.push({ 1, 1, 1 });

	visited[1][1] = true;

	while (!q.empty())
	{
		int NY = q.front().y;
		int NX = q.front().x;
		int NCnt = q.front().cnt;

		if (NY == n && NX == m)
		{
			cout << NCnt;
			break;
		}

		q.pop();

		for (int i = 0; i < 4; i++)
		{
			int tmpY = NY + where[i][0];
			int tmpX = NX + where[i][1];

			if (visited[tmpY][tmpX] == false && arr[tmpY][tmpX]==1)
			{
				q.push({ tmpY, tmpX, NCnt+1 });
				visited[tmpY][tmpX] = true;
			}
		}
	}
}
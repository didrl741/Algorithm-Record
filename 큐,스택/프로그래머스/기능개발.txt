#include <string>
#include <vector>
#include <queue>
using namespace std;

/*
    풀이방식 : '진도 100%까지 걸리는 날 수' 를 큐에 저장해서 pop할때마다 더 적은 수가
    나오면 cnt++을, 더 큰수가 나오면 즉시 cnt를 저장하고 처음부터 다시 세는 방법.
    예 : 테스트케이스의 경우 7, 3, 9가 큐에 저장되기 때문에 2,1이 답으로 return

    큐로 푼 이유 : 1번순서부터 연산하고, 연산들이 끝나면 다시 1번순서부터 조사해야되기 때문.
*/

vector<int> solution(vector<int> progresses, vector<int> speeds) {
    vector<int> answer;

    queue<int> q;

    for (int i = 0; i < progresses.size(); i++)
    {
        int n = (100 - progresses[i]) / speeds[i];
        if ((100 - progresses[i]) % speeds[i] == 0)
            q.push(n);
        else
            q.push(n + 1);
    }

    int cnt = 1;

    while (!q.empty())
    {
        int nowMax = q.front();
        q.pop();

        while (true)
        {
            if (q.front() <= nowMax && !q.empty() )     // 다음타자가 더 작고 큐가 비어있지 않으면.
            {
                cnt++;                                  
                q.pop();
            }
            else                                        // 더 큰 수가 등장하면 즉시 초기화.
            {
                answer.push_back(cnt);
                cnt = 1;
                break;
            }
        }
    }

    return answer;
}







					다른사람풀이
/*
    vector.back()++; 를 이용한 방법. (다른사람의 코드)
*/

vector<int> solution(vector<int> progresses, vector<int> speeds) {
    vector<int> answer;

    int maxDay = 0;

    for (int i = 0; i < progresses.size(); i++)
    {
        int day = (99 - progresses[i]) / speeds[i] + 1;         // 수학적인 부분. 어렵다

        if (day > maxDay)
        {
            answer.push_back(1);
            maxDay = day;
        }
        else
            answer.back()++;
    }

    return answer;
}
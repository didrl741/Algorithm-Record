기본 dp 피보나치를 응용한 문제로써, 한 숫자당 dp배열에 기억해야 할 숫자가 두개다.

#include <iostream>
#include <cstring>
using namespace std;

int n;

int fun0_arr[41];
int fun1_arr[41];

int func0(int n)
{
	if (fun0_arr[n] != -1) return fun0_arr[n];
	else
	{
		if (n == 0) {
			return 1;
		}
		else if (n == 1) {
			return 0;
		}
		else {
			return fun0_arr[n] = func0(n - 1) + func0(n - 2);
		}
	}
}

int func1(int n)
{
	if (fun1_arr[n] != -1) return fun1_arr[n];
	else
	{
		if (n == 0) {
			return 0;
		}
		else if (n == 1) {
			return 1;
		}
		else {
			return fun1_arr[n] = func1(n - 1) + func1(n - 2);
		}
	}
}

void sol(int a)
{
	cout << func0(a) << ' ' << func1(a);
	cout << "\n";
}

int main()
{
	ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);

	memset(fun0_arr, -1, sizeof(fun0_arr));
	memset(fun1_arr, -1, sizeof(fun1_arr));

	cin >> n;

	for (int i = 0; i < n; i++)
	{
		int a;
		cin >> a;
		sol(a);
	}
}
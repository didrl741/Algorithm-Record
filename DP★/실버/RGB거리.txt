풀이: bottom-up 방식의 DP 이용.

#include <iostream>
#include <cstring>
using namespace std;

int score[1001][3];
int dp[1001][3];

int main()
{
	ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);

	int n;
	cin >> n;

	memset(dp, -1, sizeof(dp));

	for (int i = 1; i <= n; i++)
	{
		cin >> score[i][0] >> score[i][1] >> score[i][2];
	}

	// 1행 처리
	for (int i = 0; i < 3; i++)
	{
		dp[1][i] = score[1][i];
	}

	// bottom-up 방식.
	for (int i = 2; i <= n; i++)
	{
		dp[i][0] = min(dp[i - 1][1], dp[i - 1][2]) + score[i][0];
		dp[i][1] = min(dp[i - 1][0], dp[i - 1][2]) + score[i][1];
		dp[i][2] = min(dp[i - 1][0], dp[i - 1][1]) + score[i][2];
	}

	int res = min(dp[n][0], dp[n][1]);
	res = min(res, dp[n][2]);

	cout << res;
}